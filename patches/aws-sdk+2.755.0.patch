diff --git a/node_modules/aws-sdk/lib/services/s3.js b/node_modules/aws-sdk/lib/services/s3.js
index cf59325..c9737cb 100644
--- a/node_modules/aws-sdk/lib/services/s3.js
+++ b/node_modules/aws-sdk/lib/services/s3.js
@@ -18,12 +18,12 @@ var operationsWith200StatusCodeError = {
 /**
  * @api private
  */
- var regionRedirectErrorCodes = [
+var regionRedirectErrorCodes = [
   'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints
   'BadRequest', // head operations on virtual-hosted global bucket endpoints
   'PermanentRedirect', // non-head operations on path-style or regional endpoints
   301 // head operations on path-style or regional endpoints
- ];
+];
 
 AWS.util.update(AWS.S3.prototype, {
   /**
@@ -73,7 +73,7 @@ AWS.util.update(AWS.S3.prototype, {
 
     if (!this.config.endpoint && this.config.s3BucketEndpoint) {
       messages.push('An endpoint must be provided when configuring ' +
-                    '`s3BucketEndpoint` to true.');
+        '`s3BucketEndpoint` to true.');
     }
     if (messages.length === 1) {
       msg = messages[0];
@@ -82,7 +82,7 @@ AWS.util.update(AWS.S3.prototype, {
     }
     if (msg) {
       throw AWS.util.error(new Error(),
-        {name: 'InvalidEndpoint', message: msg});
+        { name: 'InvalidEndpoint', message: msg });
     }
   },
 
@@ -92,7 +92,7 @@ AWS.util.update(AWS.S3.prototype, {
   shouldDisableBodySigning: function shouldDisableBodySigning(request) {
     var signerClass = this.getSignerClass();
     if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4
-        && request.httpRequest.endpoint.protocol === 'https:') {
+      && request.httpRequest.endpoint.protocol === 'https:') {
       return true;
     }
     return false;
@@ -119,7 +119,7 @@ AWS.util.update(AWS.S3.prototype, {
     request.addListener('extractData', this.extractData);
     request.addListener('extractData', this.extractErrorFrom200Response);
     request.addListener('beforePresign', this.prepareSignedUrl);
-    if (this.shouldDisableBodySigning(request))  {
+    if (this.shouldDisableBodySigning(request)) {
       request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);
       request.addListener('afterBuild', this.disableBodySigning);
     }
@@ -144,10 +144,10 @@ AWS.util.update(AWS.S3.prototype, {
   /**
    * @api private
    */
-  validateScheme: function(req) {
+  validateScheme: function (req) {
     var params = req.params,
-        scheme = req.httpRequest.endpoint.protocol,
-        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;
+      scheme = req.httpRequest.endpoint.protocol,
+      sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;
     if (sensitive && scheme !== 'https:') {
       var msg = 'Cannot send SSE keys over HTTP. Set \'sslEnabled\'' +
         'to \'true\' in your configuration';
@@ -159,7 +159,7 @@ AWS.util.update(AWS.S3.prototype, {
   /**
    * @api private
    */
-  validateBucketEndpoint: function(req) {
+  validateBucketEndpoint: function (req) {
     if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {
       var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';
       throw AWS.util.error(new Error(),
@@ -306,7 +306,7 @@ AWS.util.update(AWS.S3.prototype, {
         try {
           profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);
           profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];
-        } catch (e) {}
+        } catch (e) { }
         if (profile[configName]) {
           if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {
             throw AWS.util.error(new Error(), {
@@ -469,7 +469,7 @@ AWS.util.update(AWS.S3.prototype, {
     }
     var accessPointArn = req._parsedAccessPointArn;
     var serviceName = req.service.config.useDualstack ?
-      's3-accesspoint.dualstack':
+      's3-accesspoint.dualstack' :
       's3-accesspoint';
     var endpoint = req.httpRequest.endpoint;
     var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);
@@ -525,7 +525,7 @@ AWS.util.update(AWS.S3.prototype, {
         var charset = '; charset=UTF-8';
         httpRequest.headers['Content-Type'] += charset;
       } else {
-        var replaceFn = function(_, prefix, charsetName) {
+        var replaceFn = function (_, prefix, charsetName) {
           return prefix + charsetName.toUpperCase();
         };
 
@@ -566,7 +566,7 @@ AWS.util.update(AWS.S3.prototype, {
 
     // TODO: compute checksums for Stream objects
     if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&
-        typeof req.httpRequest.body !== 'string') {
+      typeof req.httpRequest.body !== 'string') {
       return false;
     }
 
@@ -607,7 +607,7 @@ AWS.util.update(AWS.S3.prototype, {
       SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',
       CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'
     };
-    AWS.util.each(keys, function(key, header) {
+    AWS.util.each(keys, function (key, header) {
       if (req.params[key]) {
         var value = AWS.util.crypto.md5(req.params[key], 'base64');
         req.httpRequest.headers[header] = value;
@@ -683,16 +683,16 @@ AWS.util.update(AWS.S3.prototype, {
    */
   retryableError: function retryableError(error, request) {
     if (operationsWith200StatusCodeError[request.operation] &&
-        error.statusCode === 200) {
+      error.statusCode === 200) {
       return true;
     } else if (request._requestRegionForBucket &&
-        request.service.bucketRegionCache[request._requestRegionForBucket]) {
+      request.service.bucketRegionCache[request._requestRegionForBucket]) {
       return false;
     } else if (error && error.code === 'RequestTimeout') {
       return true;
     } else if (error &&
-        regionRedirectErrorCodes.indexOf(error.code) != -1 &&
-        error.region && error.region != request.httpRequest.region) {
+      regionRedirectErrorCodes.indexOf(error.code) != -1 &&
+      error.region && error.region != request.httpRequest.region) {
       request.httpRequest.region = error.region;
       if (error.statusCode === 301) {
         request.service.updateReqBucketRegion(request);
@@ -773,9 +773,9 @@ AWS.util.update(AWS.S3.prototype, {
         }
       }
       if (region) {
-          if (bucket && region !== req.service.bucketRegionCache[bucket]) {
-            req.service.bucketRegionCache[bucket] = region;
-          }
+        if (bucket && region !== req.service.bucketRegionCache[bucket]) {
+          req.service.bucketRegionCache[bucket] = region;
+        }
       }
     }
     req.service.extractRequestIds(resp);
@@ -834,6 +834,7 @@ AWS.util.update(AWS.S3.prototype, {
         }
       }
 
+      console.debug(req);
       resp.error = AWS.util.error(new Error(), {
         code: data.Code || code,
         message: data.Message || null,
@@ -855,30 +856,30 @@ AWS.util.update(AWS.S3.prototype, {
     var bucket = req.params.Bucket || null;
 
     if (!error || !bucket || error.region || req.operation === 'listObjects' ||
-        (AWS.util.isNode() && req.operation === 'headBucket') ||
-        (error.statusCode === 400 && req.operation !== 'headObject') ||
-        regionRedirectErrorCodes.indexOf(error.code) === -1) {
+      (AWS.util.isNode() && req.operation === 'headBucket') ||
+      (error.statusCode === 400 && req.operation !== 'headObject') ||
+      regionRedirectErrorCodes.indexOf(error.code) === -1) {
       return done();
     }
     var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';
-    var reqParams = {Bucket: bucket};
+    var reqParams = { Bucket: bucket };
     if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;
     var regionReq = req.service[reqOperation](reqParams);
     regionReq._requestRegionForBucket = bucket;
-    regionReq.send(function() {
+    regionReq.send(function () {
       var region = req.service.bucketRegionCache[bucket] || null;
       error.region = region;
       done();
     });
   },
 
-   /**
-   * For browser only. If NetworkingError received, will attempt to obtain
-   * the bucket region.
-   *
-   * @api private
-   */
-   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {
+  /**
+  * For browser only. If NetworkingError received, will attempt to obtain
+  * the bucket region.
+  *
+  * @api private
+  */
+  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {
     if (!AWS.util.isBrowser()) {
       return done();
     }
@@ -886,7 +887,7 @@ AWS.util.update(AWS.S3.prototype, {
     var request = resp.request;
     var bucket = request.params.Bucket;
     if (!error || error.code !== 'NetworkingError' || !bucket ||
-        request.httpRequest.region === 'us-east-1') {
+      request.httpRequest.region === 'us-east-1') {
       return done();
     }
     var service = request.service;
@@ -903,11 +904,11 @@ AWS.util.update(AWS.S3.prototype, {
       }
       done();
     } else if (request.httpRequest.virtualHostedBucket) {
-      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});
+      var getRegionReq = service.listObjects({ Bucket: bucket, MaxKeys: 0 });
       service.updateReqBucketRegion(getRegionReq, 'us-east-1');
       getRegionReq._requestRegionForBucket = bucket;
 
-      getRegionReq.send(function() {
+      getRegionReq.send(function () {
         var region = service.bucketRegionCache[bucket] || null;
         if (region && region !== request.httpRequest.region) {
           service.updateReqBucketRegion(request, region);
@@ -920,21 +921,21 @@ AWS.util.update(AWS.S3.prototype, {
       // Cannot obtain region information for this case
       done();
     }
-   },
+  },
 
   /**
    * Cache for bucket region.
    *
    * @api private
    */
-   bucketRegionCache: {},
+  bucketRegionCache: {},
 
   /**
    * Clears bucket region cache.
    *
    * @api private
    */
-   clearBucketRegionCache: function(buckets) {
+  clearBucketRegionCache: function (buckets) {
     var bucketRegionCache = this.bucketRegionCache;
     if (!buckets) {
       buckets = Object.keys(bucketRegionCache);
@@ -945,13 +946,13 @@ AWS.util.update(AWS.S3.prototype, {
       delete bucketRegionCache[buckets[i]];
     }
     return bucketRegionCache;
-   },
+  },
 
-   /**
-    * Corrects request region if bucket's cached region is different
-    *
-    * @api private
-    */
+  /**
+   * Corrects request region if bucket's cached region is different
+   *
+   * @api private
+   */
   correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {
     var bucket = req.params.Bucket || null;
     if (bucket) {
@@ -1047,7 +1048,7 @@ AWS.util.update(AWS.S3.prototype, {
     var request = this.makeRequest(operation, params);
 
     if (callback) {
-      AWS.util.defer(function() {
+      AWS.util.defer(function () {
         request.presign(expires, callback);
       });
     } else {
@@ -1319,8 +1320,10 @@ AWS.util.update(AWS.S3.prototype, {
    */
   noPresignedContentLength: function noPresignedContentLength(request) {
     if (request.params.ContentLength !== undefined) {
-      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',
-        message: 'ContentLength is not supported in pre-signed URLs.'});
+      throw AWS.util.error(new Error(), {
+        code: 'UnexpectedParameter',
+        message: 'ContentLength is not supported in pre-signed URLs.'
+      });
     }
   },
 
@@ -1384,7 +1387,7 @@ AWS.util.update(AWS.S3.prototype, {
     }
 
     options = options || {};
-    options = AWS.util.merge(options || {}, {service: this, params: params});
+    options = AWS.util.merge(options || {}, { service: this, params: params });
 
     var uploader = new AWS.S3.ManagedUpload(options);
     if (typeof callback === 'function') uploader.send(callback);
